{"version":3,"sources":["components/info-country.js","components/info-city.js","components/display-info.js","components/display-map.js","components/filmattractive.js","App.js","serviceWorker.js","index.js"],"names":["InfoCountry","Card","className","CardContent","Component","InfoCity","this","props","info","DisplayMap","center","infos","city","size","polyline","multiPolyline","polygon","multiPolygon","rectangle","state","lat","lng","zoom","handleClick","Map","TileLayer","url","attribution","map","Circle","fillColor","radius","CircleMarker","color","onclick","Popup","Polyline","positions","Polygon","Rectangle","bounds","Filmattractive","bind","setState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63249328.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PublicIcon from \"@material-ui/icons/Public\";\r\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\r\nimport TrendingDownIcon from \"@material-ui/icons/TrendingDown\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\nclass InfoCountry extends Component {\r\n  render() {\r\n    return (\r\n      <Card className=\"info-wrapper info-world\">\r\n        <div className=\"info-title\">Classements national</div>\r\n        <CardContent>\r\n          <div className=\"info-row\">\r\n            <TrendingUpIcon /> Villes les plus populaires\r\n          </div>\r\n          <div className=\"info-row\">\r\n            <TrendingDownIcon /> Villes les moins populaires\r\n          </div>\r\n          <div className=\"info-row\">\r\n            <PublicIcon /> Villes avec le plus de films étrangers\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InfoCountry;\r\n","import React, { Component } from \"react\";\r\nimport PublicIcon from \"@material-ui/icons/Public\";\r\nimport MovieIcon from \"@material-ui/icons/Movie\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\nclass InfoCity extends Component {\r\n  render() {\r\n    return (\r\n      <Card className=\"info-wrapper info-city\">\r\n        <div className=\"info-title\">Information sur {this.props.info}</div>\r\n        <CardContent>\r\n          <div className=\"info-row\">\r\n            <MovieIcon /> Nombre de films\r\n          </div>\r\n          <div className=\"info-row\">\r\n            <PublicIcon /> Nombre de films étrangers\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InfoCity;\r\n","import React, { Component } from \"react\";\r\n\r\nimport InfoCountry from \"./info-country\";\r\nimport InfoCity from \"./info-city\";\r\n\r\nclass DisplayMap extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper display-info\">\r\n        <InfoCountry />\r\n        <InfoCity info={this.props.info} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayMap;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Map,\r\n  Marker,\r\n  Popup,\r\n  TileLayer,\r\n  Circle,\r\n  CircleMarker,\r\n  Rectangle,\r\n  Polygon,\r\n  Polyline,\r\n} from \"react-leaflet\";\r\nconst center = [46, 2];\r\n\r\nconst infos = [\r\n  { city: \"Paris\", size: \"12\" },\r\n  { city: \"Marseille\", size: \"5\" },\r\n];\r\n\r\nconst polyline = [\r\n  [46, 2],\r\n  [46.5, 2.02],\r\n  [46.51, 2.12],\r\n];\r\n\r\nconst multiPolyline = [\r\n  [\r\n    [46.5, 2],\r\n    [46.5, 2.12],\r\n    [46.52, 2.12],\r\n  ],\r\n  [\r\n    [46.5, 1],\r\n    [46.5, 1.12],\r\n    [46.52, 1.12],\r\n  ],\r\n];\r\n\r\nconst polygon = [\r\n  [51.515, -0.09],\r\n  [51.52, -0.1],\r\n  [51.52, -0.12],\r\n];\r\n\r\nconst multiPolygon = [\r\n  [\r\n    [51.51, -0.12],\r\n    [51.51, -0.13],\r\n    [51.53, -0.13],\r\n  ],\r\n  [\r\n    [51.51, -0.05],\r\n    [51.51, -0.07],\r\n    [51.53, -0.07],\r\n  ],\r\n];\r\n\r\nconst rectangle = [\r\n  [51.49, -0.08],\r\n  [51.5, -0.06],\r\n];\r\n\r\nclass DisplayMap extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      lat: 51.505,\r\n      lng: -0.09,\r\n      zoom: 13,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const position = [this.state.lat, this.state.lng];\r\n    const { handleClick } = this.props;\r\n    return (\r\n      <div className=\"component-wrapper map-wrapper\">\r\n        <Map center={center} zoom={6}>\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n          {infos.map(() => {})}\r\n          <Circle center={center} fillColor=\"blue\" radius={200} />\r\n          <CircleMarker\r\n            center={center}\r\n            color=\"red\"\r\n            radius={20}\r\n            onclick={handleClick}\r\n          >\r\n            <Popup>Popup in CircleMarker</Popup>\r\n          </CircleMarker>\r\n          <Polyline color=\"lime\" positions={polyline} />\r\n          <Polyline color=\"lime\" positions={multiPolyline} />\r\n          <Polygon color=\"purple\" positions={polygon} />\r\n          <Polygon color=\"purple\" positions={multiPolygon} />\r\n          <Rectangle bounds={rectangle} color=\"black\" />\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayMap;\r\n","import React, { Component } from \"react\";\r\nimport DisplayInfo from \"./display-info\";\r\nimport DisplayMap from \"./display-map\";\r\n\r\nclass Filmattractive extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      info: \"\",\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  handleClick() {\r\n    const info = \"Clicked\";\r\n    this.setState({ info });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"filmattractive-wrapper\">\r\n        <DisplayMap handleClick={this.handleClick} />\r\n        <DisplayInfo info={this.state.info} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Filmattractive;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Filmattractive from \"./components/filmattractive\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Filmattractive />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"leaflet/dist/leaflet.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}